sources=[
    {
        format=PARQUET
        id="normalized_researchstudy"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/researchstudy"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_researchstudy"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_patient"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/patient"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_patient"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_group"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/group"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_group"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_documentreference"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/documentreference"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_documentreference"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_specimen"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/specimen"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_specimen"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_condition_disease"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/condition/disease"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_condition_disease"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_condition_phenotype"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/condition/phenotype"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_condition_phenotype"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="normalized_observation"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/fhir/observation"
        readoptions {}
        storageid=normalized
        table {
            database=normalized
            name="fhir_observation"
        }
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="simple_participant"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/es_index/fhir/simple_participant"
        readoptions {}
        storageid=es_index
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="es_index_study_centric"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/es_index/fhir/study_centric"
        readoptions {}
        storageid=es_index
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="es_index_participant_centric"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/es_index/fhir/participant_centric"
        readoptions {}
        storageid=es_index
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=PARQUET
        id="es_index_file_centric"
        keys=[]
        loadtype=OverWrite
        partitionby=[study_id, release_id]
        path="/es_index/fhir/file_centric"
        readoptions {}
        storageid=es_index
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=JSON
        id="hpo_terms"
        keys=[]
        loadtype=OverWrite
        partitionby=[]
        path="/hpo_terms"
        readoptions {}
        storageid=hpo_terms
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    },
    {
        format=JSON
        id="mondo_terms"
        keys=[]
        loadtype=OverWrite
        partitionby=[]
        path="/mondo_terms"
        readoptions {}
        storageid=mondo_terms
        writeoptions {
            "created_on_column"="created_on"
            "updated_on_column"="updated_on"
            "valid_from_column"="valid_from"
            "valid_to_column"="valid_to"
        }
    }
]
sparkconf {
    "spark.databricks.delta.retentionDurationCheck.enabled"="false"
    "spark.delta.merge.repartitionBeforeWrite"="true"
    "spark.hadoop.fs.s3a.access.key"=minioadmin
    "spark.hadoop.fs.s3a.endpoint"="http://127.0.0.1:9000"
    "spark.hadoop.fs.s3a.impl"="org.apache.hadoop.fs.s3a.S3AFileSystem"
    "spark.hadoop.fs.s3a.path.style.access"="true"
    "spark.hadoop.fs.s3a.secret.key"=minioadmin
    "spark.master"=local
    "spark.sql.catalog.spark_catalog"="org.apache.spark.sql.delta.catalog.DeltaCatalog"
    "spark.sql.extensions"="io.delta.sql.DeltaSparkSessionExtension"
    "spark.sql.legacy.timeParserPolicy"=CORRECTED
    "spark.sql.mapKeyDedupPolicy"="LAST_WIN"
    "spark.network.timeout"="5m"
    "spark.executor.heartbeatInterval"="1m"
    "spark.driver.memory"="6g"
    "spark.sql.autoBroadcastJoinThreshold"="-1"
}
storages=[
    {
        filesystem=S3
        id=normalized
        path="s3a://normalized"
    },
    {
        filesystem=S3
        id=es_index
        path="s3a://esindex"
    },
    {
        filesystem=S3
        id=hpo_terms
        path="s3a://hpoterms"
    },
    {
        filesystem=S3
        id=mondo_terms
        path="s3a://mondoterms"
    }
]
